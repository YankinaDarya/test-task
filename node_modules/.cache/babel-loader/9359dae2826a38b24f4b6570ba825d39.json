{"ast":null,"code":"import _objectSpread from \"/home/daria/table/test-task/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { dataAPI } from \"../api/api\";\nconst SET_DATA = 'SET_DATA';\nconst SET_KEYS = 'SET_KEYS';\nconst DIRECT_SORT = 'DIRECT_SORT';\nconst REVERSED_SORT = 'REVERSED_SORT';\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\nlet initialState = {\n  profiles: [],\n  keys: [],\n  initialized: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_DATA:\n      return _objectSpread({}, state, {\n        profiles: action.data\n      });\n\n    case SET_KEYS:\n      return _objectSpread({}, state, {\n        keys: action.keys\n      });\n\n    case INITIALIZED_SUCCESS:\n      return _objectSpread({}, state, {\n        initialized: true\n      });\n\n    case DIRECT_SORT:\n      return _objectSpread({}, state, {\n        profiles: [...state.profiles.sort((a, b) => a[action.key].toLowerCase() > b[action.key].toLowerCase() ? 1 : b[action.key].toLowerCase() > a[action.key].toLowerCase() ? -1 : 0)]\n      });\n\n    case REVERSED_SORT:\n      return _objectSpread({}, state, {\n        profiles: [...state.profiles.sort((a, b) => b[action.key].toLowerCase() > a[action.key].toLowerCase() ? 1 : a[action.key].toLowerCase() > b[action.key].toLowerCase() ? -1 : 0)]\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nconst setData = data => ({\n  type: SET_DATA,\n  data\n});\n\nconst setKeys = keys => ({\n  type: SET_KEYS,\n  keys\n});\n\nconst initializedSuccess = () => ({\n  type: INITIALIZED_SUCCESS\n});\n\nexport const directSort = key => ({\n  type: DIRECT_SORT,\n  key\n});\nexport const reversedSort = key => ({\n  type: REVERSED_SORT,\n  key\n});\nexport const getProfiles = () => dispatch => {\n  return dataAPI.getData().then(response => {\n    if (response.status === 200) {\n      dispatch(setKeys(Object.keys(response.data[0])));\n      dispatch(setData(response.data));\n    }\n  });\n};\nexport const initializeApp = () => dispatch => {\n  let promise = dispatch(getProfiles());\n  Promise.all([promise]).then(() => {\n    dispatch(initializedSuccess());\n  });\n};","map":{"version":3,"sources":["/home/daria/table/test-task/src/redux/reducer.js"],"names":["dataAPI","SET_DATA","SET_KEYS","DIRECT_SORT","REVERSED_SORT","INITIALIZED_SUCCESS","initialState","profiles","keys","initialized","reducer","state","action","type","data","sort","a","b","key","toLowerCase","setData","setKeys","initializedSuccess","directSort","reversedSort","getProfiles","dispatch","getData","then","response","status","Object","initializeApp","promise","Promise","all"],"mappings":"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","sourcesContent":["import {dataAPI} from \"../api/api\";\n\nconst SET_DATA = 'SET_DATA';\nconst SET_KEYS = 'SET_KEYS';\nconst DIRECT_SORT = 'DIRECT_SORT';\nconst REVERSED_SORT = 'REVERSED_SORT';\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\n\nlet initialState = {\n    profiles: [],\n    keys: [],\n    initialized: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_DATA:\n            return {\n              ...state, profiles: action.data\n            };\n        case SET_KEYS:\n            return {\n              ...state, keys: action.keys\n            };\n        case INITIALIZED_SUCCESS:\n            return {\n                ...state, initialized: true\n            };\n        case DIRECT_SORT:\n            return {\n              ...state,\n                profiles: [...state.profiles.sort((a, b) =>\n                    (a[action.key].toLowerCase() > b[action.key].toLowerCase()) ?\n                        1 : ((b[action.key].toLowerCase() > a[action.key].toLowerCase()) ? -1 : 0))]\n            };\n        case REVERSED_SORT:\n            return {\n                ...state,\n                profiles: [...state.profiles.sort((a, b) =>\n                    (b[action.key].toLowerCase() > a[action.key].toLowerCase()) ?\n                        1 : ((a[action.key].toLowerCase() > b[action.key].toLowerCase()) ? -1 : 0))]\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n\nconst setData = (data) => ({type: SET_DATA, data});\nconst setKeys = (keys) => ({type: SET_KEYS, keys});\nconst initializedSuccess = () => ({type: INITIALIZED_SUCCESS});\nexport const directSort = (key) => ({type: DIRECT_SORT, key});\nexport const reversedSort = (key) => ({type: REVERSED_SORT, key});\n\nexport const getProfiles = () => (dispatch) => {\n    return dataAPI.getData().then(\n        response => {\n            if(response.status === 200) {\n                dispatch(setKeys(Object.keys(response.data[0])));\n                dispatch(setData(response.data));\n            }\n        }\n    )\n};\n\nexport const initializeApp = () => (dispatch) => {\n    let promise = dispatch(getProfiles());\n    Promise.all([promise])\n        .then(() => {\n            dispatch(initializedSuccess());\n        });\n};"]},"metadata":{},"sourceType":"module"}